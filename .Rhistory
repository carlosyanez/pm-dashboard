library(tidyverse)
source("trello.R", echo = F, prompt.echo = "", spaced = F)
token_data <- csv_read("trello.R")
token_data <- read_delim("trello.R","=")
View(token_data)
token_data <- read_delim("trello_secret.text","=")
token_data <- read_delim("trello_secret.txt","=")
View(token_data)
token_data <- read_delim("trello_secret.txt","=",col_names = FALSE)
View(token_data)
View(token_data)
token_data[1,2]
my_token <- get_token(key = token_data[1,2], secret = token_data[2,2], appname = "my-app")
token_data[2,2]
which(token_data[,1]=="secret")
token_data[which(token_data[,1]=="secret"),2]
token_data[which(token_data[,1]=="secret"),2]
token_data <- read_delim("trello_secret.txt","=",col_names = FALSE)
key<- token_data[which(token_data[,1]=="key"),2]
secret<- token_data[which(token_data[,1]=="secret"),2]
my_token <- get_token(key = key, secret = secret, appname = "my-app")
View(secret)
View(key)
token_data[which(token_data[,1]=="key"),2] %>% pull(.)
token_data <- read_delim("trello_secret.txt","=",col_names = FALSE)
key<- token_data[which(token_data[,1]=="key"),2] %>% pull(.)
secret<- token_data[which(token_data[,1]=="secret"),2] %>% pull(.)
my_token <- get_token(key = key, secret = secret, appname = "my-app")
View(my_token)
trello_token <- function(text_file){
token_data <- read_delim(text_file,"=",col_names = FALSE)
key<- token_data[which(token_data[,1]=="key"),2] %>% pull(.)
secret<- token_data[which(token_data[,1]=="secret"),2] %>% pull(.)
my_token <- get_token(key = key, secret = secret, appname = "my-app")
my token
trello_token <- function(text_file){
token_data <- read_delim(text_file,"=",col_names = FALSE)
key<- token_data[which(token_data[,1]=="key"),2] %>% pull(.)
secret<- token_data[which(token_data[,1]=="secret"),2] %>% pull(.)
my_token <- get_token(key = key, secret = secret, appname = "my-app")
my_token
}
rm(my_token)
my_token <- trello_token("trello_secret.txt")
my_token <- trello_token("trello_secret.txt")
my_boards<-get_my_boards(my_token)
my_cards <- get_all_cards(my_boards,my_token)
my_lists <- get_all_lists(my_boards,my_token)
my_checklists <- get_all_checklists(my_boards,my_token)
my_comments<- get_all_comments(my_boards,my_token)
my_labels <- get_all_labels(my_boards,my_token)
my_members <- get_all_members(my_boards,my_token)
rm(key,secret)
View(token_data)
rm(token_data)
View(my_boards)
View(my_checklists)
View(my_checklists[[6]][[8]])
View(my_checklists[[6]][[10]])
View(my_checklists[[6]][[1]])
View(my_cards)
View(my_cards)
my_boards %>% transmute(idBoard=id)
my_cards %>% left_join((my_boards %>%
mutate(idBoard=id) %>%
select(-id)),
by="idBoard")
my_boards
cards <- my_cards %>% left_join((my_boards %>%
transmute(idBoard=id,
Project_Name=name,
Project_URL=url,
Project_Desc=desc,
Project_BKG=prefs.backgroundImage)) ,
by="idBoard")
View(cards)
View(my_lists)
cards <- my_cards %>% left_join((my_boards %>%
transmute(idBoard=id,
Project_Name=name,
Project_URL=url)) ,
by="idBoard") %>%
left_join((my_lists %>%
transmute(idList=id,
List_Name=name,)),
by="idList")
View(cards)
View(cards)
View(cards[[13]][[15]])
View(cards[[13]][[15]])
View(cards[[13]][[4]])
install.packages("tidymodels")
View(my_lists)
View(my_members)
View(my_lists)
View(my_members)
View(cards)
View(my_boards)
View(my_cards)
View(my_checklists)
View(my_comments)
View(my_labels)
View(my_lists)
View(my_members)
View(my_token)
View(my_boards)
View(cards)
View(my_boards)
View(my_cards)
View(my_labels)
View(my_comments)
cards <- my_cards %>% left_join((my_boards %>%
transmute(idBoard=id,
Project_Name=name,
Project_URL=url)) ,
by="idBoard") %>%
left_join((my_lists %>%
transmute(idList=id,
List_Name=name,)),
by="idList")
source("trello.R", echo = F, prompt.echo = "", spaced = F)
source("trello.R", echo = F, prompt.echo = "", spaced = F)
Library(lubridate)
source("trello.R", echo = F, prompt.echo = "", spaced = F)
library(lubridate)
cards <- my_cards %>% left_join((my_boards %>%
transmute(idBoard=id,
Project_Name=name,
Project_URL=url)) ,
by="idBoard") %>%
left_join((my_lists %>%
transmute(idList=id,
List_Name=name,)),
by="idList")
View(cards)
trello_retrieve <- function(text_file){
output <-vector(mode = "list", length = 0)
my_token <- trello_token(text_file)
my_boards<-get_my_boards(my_token)
output$boards <- my_boards
output$cards <- get_all_cards(my_boards,my_token)
output$lists <- get_all_lists(my_boards,my_token)
output$checklists <- get_all_checklists(my_boards,my_token)
output$comments<- get_all_comments(my_boards,my_token)
output$labels <- get_all_labels(my_boards,my_token)
output$members <- get_all_members(my_boards,my_token)
output
}
trello<-trello_retrieve("trello_secret.txt")
trello
source("trello.R", echo = F, prompt.echo = "", spaced = F)
library(lubridate)
trello<-trello_retrieve("trello_secret.txt")
trello<-trello_retrieve("trello_secret.txt")
text_file <- "trello_secret.txt"
output <-vector(mode = "list", length = 0)
my_token <- trello_token(text_file)
my_boards<-get_my_boards(my_token)
source("trello.R", echo = F, prompt.echo = "", spaced = F)
library(lubridate)
source("trello.R", echo = F, prompt.echo = "", spaced = F)
library(lubridate)
trello<-trello_retrieve_data("trello_secret.txt")
source("trello.R", echo = F, prompt.echo = "", spaced = F)
library(lubridate)
trello<-trello_retrieve_data("trello_secret.txt")
knitr::opts_chunk$set(echo = TRUE)
# Get this figure: fig <- get_figure("PythonPlotBot", 2462)
# Get this figure's data: data <- get_figure("PythonPlotBot", 2462)$data
# Add data to this figure: p <- add_trace(p, x=c(4, 5), y=c(4, 5), kwargs=list(filename="simple-colorscales-colorscale", fileopt="extend"))
# Get z data of first trace: z1 <- get_figure("PythonPlotBot", 2462)$data[[1]]$z
# Get figure documentation: https://plotly.com/r/get-requests/
# Add data documentation: https://plotly.com/r/file-options/
# You can reproduce this figure in R with the following code!
# Learn about API authentication here: https://plotly.com/r/getting-started
# Find your api_key here: https://plotly.com/settings/api
library(plotly)
trace1 <- list(
type = "contour",
z = matrix(c(10, 10.625, 12.5, 15.625, 20, 5.625, 6.25, 8.125, 11.25, 15.625, 2.5, 3.125, 5.0, 8.125, 12.5, 0.625, 1.25, 3.125, 6.25, 10.625, 0, 0.625, 2.5, 5.625, 10), nrow=5, ncol=5),
colorscale = "Jet"
)
data <- list(trace1)
p <- plot_ly()
p <- add_trace(p, type=trace1$type, z=trace1$z, colorscale=trace1$colorscale)
p
# Get this figure: fig <- get_figure("PythonPlotBot", 2462)
# Get this figure's data: data <- get_figure("PythonPlotBot", 2462)$data
# Add data to this figure: p <- add_trace(p, x=c(4, 5), y=c(4, 5), kwargs=list(filename="simple-colorscales-colorscale", fileopt="extend"))
# Get z data of first trace: z1 <- get_figure("PythonPlotBot", 2462)$data[[1]]$z
# Get figure documentation: https://plotly.com/r/get-requests/
# Add data documentation: https://plotly.com/r/file-options/
# You can reproduce this figure in R with the following code!
# Learn about API authentication here: https://plotly.com/r/getting-started
# Find your api_key here: https://plotly.com/settings/api
library(plotly)
trace1 <- list(
type = "contour",
z = matrix(c(10, 10.625, 12.5, 15.625, 20, 5.625, 6.25, 8.125, 11.25, 15.625, 2.5, 3.125, 5.0, 8.125, 12.5, 0.625, 1.25, 3.125, 6.25, 10.625, 0, 0.625, 2.5, 5.625, 10), nrow=5, ncol=5),
colorscale = "Jet"
)
data <- list(trace1)
p <- plot_ly()
p <- add_trace(p, type=trace1$type, z=trace1$z, colorscale=trace1$colorscale)
p
install.packages(c("fiery", "routr", "reqres", "htmltools", "base64enc", "plotly", "mime", "crayon", "devtools"))
install.packages(c("fiery", "routr", "reqres", "htmltools", "base64enc", "plotly", "mime", "crayon", "devtools"))
install.packages(c("fiery", "routr", "reqres", "htmltools", "base64enc", "plotly", "mime", "crayon", "devtools"))
install.packages(c("fiery", "routr", "reqres", "htmltools", "base64enc", "plotly", "mime", "crayon", "devtools"))
library(devtools)
version()
version
install_github('andreacirilloac/updateR')
